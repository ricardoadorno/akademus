services:
  postgres:
    image: postgres:15-alpine
    container_name: akademus-postgres-dev
    restart: unless-stopped
    env_file:
      - .env.development
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - akademus-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    command: npx prisma migrate deploy
    env_file:
      - .env.development
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - akademus-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: akademus-api-dev
    restart: unless-stopped
    env_file:
      - .env.development
    ports:
      - '3000:3000'
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - akademus-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    name: akademus-postgres-dev-data

networks:
  akademus-network:
    name: akademus-dev-network
    driver: bridge
